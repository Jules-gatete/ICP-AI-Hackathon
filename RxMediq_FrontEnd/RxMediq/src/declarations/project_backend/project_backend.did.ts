// This is a temporary mock of the canister interface
// Replace this with the actual interface generated by `dfx generate`

export interface _SERVICE {
  createUser: (username: string, name: string, age: number, financialStatus: string) => Promise<string>;
  getUserData: (username: string) => Promise<{ ok: any } | { err: string }>;
  addMedicalHistory: (username: string, history: string) => Promise<string>;
  addSymptoms: (username: string, symptoms: string[]) => Promise<string>;
  addTestResult: (username: string, testName: string, result: string) => Promise<string>;
  getDrugRecommendation: (username: string) => Promise<{
    medicineName: string;
    effectiveness: number;
    affordabilityScore: number;
    alternativeOptions: string[];
  } | null>;
}

export const idlFactory = ({ IDL }: { IDL: any }) => {
  return IDL.Service({
    createUser: IDL.Func(
      [IDL.Text, IDL.Text, IDL.Nat, IDL.Text],
      [IDL.Text],
      []
    ),
    getUserData: IDL.Func(
      [IDL.Text],
      [IDL.Variant({ ok: IDL.Any, err: IDL.Text })],
      ['query']
    ),
    addMedicalHistory: IDL.Func([IDL.Text, IDL.Text], [IDL.Text], []),
    addSymptoms: IDL.Func([IDL.Text, IDL.Vec(IDL.Text)], [IDL.Text], []),
    addTestResult: IDL.Func([IDL.Text, IDL.Text, IDL.Text], [IDL.Text], []),
    getDrugRecommendation: IDL.Func(
      [IDL.Text],
      [
        IDL.Opt(
          IDL.Record({
            medicineName: IDL.Text,
            effectiveness: IDL.Float64,
            affordabilityScore: IDL.Float64,
            alternativeOptions: IDL.Vec(IDL.Text),
          })
        ),
      ],
      ['query']
    ),
  });
};